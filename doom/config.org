:DOC-CONFIG:
#+property: header-args:emacs-lisp :tangle config.el :mkdirp yes :comments no
#+startup: fold
:END:
* Table of Contents :TOC_3:
- [[#guidance][Guidance]]
- [[#environment-variables][Environment variables]]
- [[#theme-settings][Theme settings]]
  - [[#theme-color-scheme][Theme color scheme]]
  - [[#display-line-numbers][Display line numbers]]
- [[#org-mode-settings][Org mode settings]]
  - [[#general][General]]
- [[#music][Music]]
  - [[#eradio][eradio]]
    - [[#startup][Startup]]
    - [[#keymaps][Keymaps]]
    - [[#radio-list][Radio list]]
- [[#web-search][Web search]]
- [[#ai][AI]]
  - [[#gptel][gptel]]
- [[#swapping-caps-for-escape][Swapping caps for escape]]

* Guidance
 Whenever you reconfigure a package, make sure to wrap your config in an
 `after!' block, otherwise Doom's defaults may override your settings. E.g.

   (after! PACKAGE
     (setq x y))

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
 etc).

 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
 they are implemented.

* Environment variables
#+begin_src emacs-lisp :tangle yes
;; Load the dot-env package
;; (use-package dot-env
;;   :ensure t
;;   :config
;;   (dot-env-config)  ;; Automatically loads from .env file
;;   (when (file-exists-p "../.env")
;;     (dot-env-load "../.env")))  ;; Explicitly load the .env file

;; ;; Test that the environment variable is loaded
;; (message "API Key: %s" (getenv "GROQ_API_KEY"))
#+end_src

#+RESULTS:

* Theme settings
** Theme color scheme
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-one)
#+end_src

** Display line numbers
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src

* Org mode settings
** General
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/org/")
#+end_src

* Music
** eradio
*** Startup
This autoplays the radio when emacs starts up for the first time.
#+begin_src emacs-lisp :tangle yes
(eradio-play "https://somafm.com/groovesalad256.pls")
#+end_src

*** Keymaps
#+begin_src emacs-lisp :tangle yes
(map! :leader (:prefix ("r" . "eradio") :desc "Play a radio channel" "p" 'eradio-play))
(map! :leader (:prefix ("r" . "eradio") :desc "Stop the radio player" "s" 'eradio-stop))
(map! :leader (:prefix ("r" . "eradio") :desc "Toggle the radio player" "t" 'eradio-toggle))
#+end_src

*** Radio list
#+begin_src emacs-lisp :tangle yes
(setq eradio-channels '(("def con - soma fm" . "https://somafm.com/defcon256.pls")         ;; electronica with defcon-speaker bumpers
                        ("metal - soma fm"   . "https://somafm.com/metal130.pls")          ;; \m/
                        ("bossa beyond - soma fm"  . "https://somafm.com/bossa256.pls")    ;; bossa nova
                        ("ambient - soma fm"  . "https://somafm.com/groovesalad256.pls")   ;; ambient and chill
                        ))
#+end_src

* Web search
Leverages =counsel-web-search= to open a mini-buffer at the bottom of the screen, showing the top results of the search

#+begin_src emacs-lisp :tangle yes
(map! :leader "s w" 'counsel-web-search :desc "Search the web")
(setq eww-auto-rename-buffer 'title)
#+end_src
* AI
** gptel
#+begin_src emacs-lisp :tangle yes
(use-package! gptel)
(setq gptel-default-mode 'org-mode)
(setq gptel-model 'llama-3.3-70b-versatile
      gptel-backend
      (gptel-make-openai "Groq"
        :host "api.groq.com"
        :endpoint "/openai/v1/chat/completions"
        :stream t
        :key "GROQ"                   ;can be a function that returns the key
        :models '(llama-3.3-70b-versatile
                  llama-3.1-8b-instant
                  llama3-70b-8192
                  llama3-8b-8192
                  mixtral-8x7b-32768
                  gemma-7b-it))
#+end_src

* Swapping caps for escape
This needs to be done in $HOME/.profile: =/usr/bin/setxkbmap -option "caps:swapescape"=
Or C-c C-c in the code block below:
#+begin_src bash
echo /usr/bin/setxkbmap -option \"caps:swapescape\" >> $HOME/.profile
#+end_src
